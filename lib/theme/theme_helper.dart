import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.primaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: PrimaryColors().orangeNormal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  ThemeData _getDarkTheme(){
    return ThemeData(
      fontFamily: GoogleFonts.plusJakartaSans().fontFamily,
        brightness: Brightness.dark,
        primaryColor: PrimaryColors().orangeNormal,
        scaffoldBackgroundColor: Colors.red,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: PrimaryColors().orangeNormal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  ThemeData _getLightTheme(){
    return ThemeData(
        brightness: Brightness.light,
        scaffoldBackgroundColor: Colors.black,
        primaryColor: PrimaryColors().orangeNormal,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: PrimaryColors().orangeNormal,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();

  ThemeData darkTheme() => _getDarkTheme();

  ThemeData lightTheme() => _getLightTheme();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium:GoogleFonts.plusJakartaSans(
          color: colorScheme.onError,
          fontSize: 14.fSize,
          //fontFamily: 'DM Sans',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge:GoogleFonts.plusJakartaSans(
          color: appTheme.black900,
          fontSize: 32.fSize,
         // fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        labelLarge:GoogleFonts.plusJakartaSans(
          color: colorScheme.primary,
          fontSize: 12.fSize,
         // fontFamily: 'Noto Sans',
          fontWeight: FontWeight.w500,
        ),
        titleSmall:GoogleFonts.plusJakartaSans(
          color: appTheme.whiteA700,
          fontSize: 15.fSize,
       //   fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFFF7D22),
    primaryContainer: Color(0XFF2D2D30),


    // Error colors
    errorContainer: Color(0XFFDB7600),
    onError: Color(0XFFD7D7D7),

    // On colors(text colors)
    onPrimary: Color(0XFF231F20),
    onPrimaryContainer: Color(0XFFF6F6F6),
  );
}

/// Class containing custom colors for a primary theme.
class   PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray10019 => Color(0X19D9D9D9);
  Color get blueGray900 => Color(0XFF373334);
  Color get blueGray90001 => Color(0XFF323232);

  // Gray
  Color get gray300 => Color(0XFFD9DFE6);
  Color get gray500 => Color(0XFFafb2ac);
  Color get gray800 => Color(0XFF474747);
  Color get gray80099 => Color(0X993E3E42);
  Color get grayBg => Color(0XFF2D2D30);

  // Orange
  Color get orange900 => Color(0XFFE05100);
  Color get orangeNormal => Color(0XFFDB7600);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
  Color get pureWhite => Colors.white;
  Color get errorRed => Colors.red;
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();

///Dark theme
ThemeData darkTheme = ThemeData(
  brightness: Brightness.dark,
  appBarTheme: AppBarTheme(backgroundColor: appTheme.gray800),
    primaryColor: appTheme.orangeNormal,
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      backgroundColor: PrimaryColors().orangeNormal,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8.h),
      ),
      visualDensity: const VisualDensity(
        vertical: -4,
        horizontal: -4,
      ),
      padding: EdgeInsets.zero,
    ),
  ),
  colorScheme: ColorScheme.dark(
    primary: appTheme.orangeNormal,
      background: PrimaryColors().grayBg,
      errorContainer: appTheme.orangeNormal,
      onInverseSurface: appTheme.pureWhite,
      surfaceTint: Colors.white,
      surface: PrimaryColors().gray500,
      secondaryContainer: PrimaryColors().gray800,
      tertiary: Colors.white,
  ),
    textTheme: TextTheme(
      headlineLarge:GoogleFonts.plusJakartaSans(
        color: appTheme.pureWhite,
        fontSize: 32.fSize,
     //   fontFamily: 'Poppins',
        fontWeight: FontWeight.w700,
      ),
      titleSmall:GoogleFonts.plusJakartaSans(
        color: appTheme.pureWhite,
        fontSize: 15.fSize,
        //fontFamily: 'Poppins',
        fontWeight: FontWeight.w700,
      ),
    ),
    timePickerTheme: TimePickerThemeData(
        hourMinuteColor: PrimaryColors().orangeNormal,
        backgroundColor: PrimaryColors().grayBg,
        dialBackgroundColor: PrimaryColors().grayBg,
        dayPeriodColor: PrimaryColors().orangeNormal
    ),
  datePickerTheme: DatePickerThemeData(
    backgroundColor: PrimaryColors().grayBg,
  )
);

///Light Theme
ThemeData lightTheme = ThemeData(
  brightness: Brightness.light,
  primaryColor: appTheme.orangeNormal,
  elevatedButtonTheme: ElevatedButtonThemeData(
    style: ElevatedButton.styleFrom(
      backgroundColor: PrimaryColors().orangeNormal,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8.h),
      ),
      visualDensity: const VisualDensity(
        vertical: -4,
        horizontal: -4,
      ),
      padding: EdgeInsets.zero,
    ),
  ),
  colorScheme: ColorScheme.light(
      primary: appTheme.orangeNormal,
      onInverseSurface: appTheme.black900,
      background: PrimaryColors().pureWhite,
      errorContainer: appTheme.orangeNormal,
      surfaceTint: Colors.grey,
      surface: PrimaryColors().gray800,
      secondaryContainer: PrimaryColors().gray300,
      tertiary: PrimaryColors().grayBg
  ),
  textTheme: TextTheme(
    headlineLarge:GoogleFonts.plusJakartaSans(
      color: appTheme.black900,
      fontSize: 32.fSize,
    //  fontFamily: 'Poppins',
      fontWeight: FontWeight.w700,
    ),
    titleSmall:GoogleFonts.plusJakartaSans(
      color: appTheme.gray800,
      fontSize: 15.fSize,
     // fontFamily: 'Poppins',
      fontWeight: FontWeight.w700,
    ),
  ),
    timePickerTheme: TimePickerThemeData(
      hourMinuteColor: PrimaryColors().orangeNormal,
      backgroundColor: PrimaryColors().pureWhite,
      dialBackgroundColor: PrimaryColors().pureWhite,
      dayPeriodColor: PrimaryColors().orangeNormal
    ),
    datePickerTheme: DatePickerThemeData(
      backgroundColor: PrimaryColors().pureWhite,
    )
);